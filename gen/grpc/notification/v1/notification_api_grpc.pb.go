// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: notification/v1/notification_api.proto

package notificationV1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	NotificationAPI_NotifyEmail_FullMethodName = "/notification.v1.NotificationAPI/NotifyEmail"
	NotificationAPI_NotifySms_FullMethodName   = "/notification.v1.NotificationAPI/NotifySms"
)

// NotificationAPIClient is the client API for NotificationAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Security config api.
type NotificationAPIClient interface {
	// Send an email notification.
	NotifyEmail(ctx context.Context, in *EmailNotifyRequest, opts ...grpc.CallOption) (*EmailNotifyResponse, error)
	// Send an SMS notification.
	NotifySms(ctx context.Context, in *SmsNotifyRequest, opts ...grpc.CallOption) (*SmsNotifyResponse, error)
}

type notificationAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationAPIClient(cc grpc.ClientConnInterface) NotificationAPIClient {
	return &notificationAPIClient{cc}
}

func (c *notificationAPIClient) NotifyEmail(ctx context.Context, in *EmailNotifyRequest, opts ...grpc.CallOption) (*EmailNotifyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmailNotifyResponse)
	err := c.cc.Invoke(ctx, NotificationAPI_NotifyEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationAPIClient) NotifySms(ctx context.Context, in *SmsNotifyRequest, opts ...grpc.CallOption) (*SmsNotifyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SmsNotifyResponse)
	err := c.cc.Invoke(ctx, NotificationAPI_NotifySms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationAPIServer is the server API for NotificationAPI service.
// All implementations should embed UnimplementedNotificationAPIServer
// for forward compatibility
//
// Security config api.
type NotificationAPIServer interface {
	// Send an email notification.
	NotifyEmail(context.Context, *EmailNotifyRequest) (*EmailNotifyResponse, error)
	// Send an SMS notification.
	NotifySms(context.Context, *SmsNotifyRequest) (*SmsNotifyResponse, error)
}

// UnimplementedNotificationAPIServer should be embedded to have forward compatible implementations.
type UnimplementedNotificationAPIServer struct {
}

func (UnimplementedNotificationAPIServer) NotifyEmail(context.Context, *EmailNotifyRequest) (*EmailNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyEmail not implemented")
}
func (UnimplementedNotificationAPIServer) NotifySms(context.Context, *SmsNotifyRequest) (*SmsNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifySms not implemented")
}

// UnsafeNotificationAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationAPIServer will
// result in compilation errors.
type UnsafeNotificationAPIServer interface {
	mustEmbedUnimplementedNotificationAPIServer()
}

func RegisterNotificationAPIServer(s grpc.ServiceRegistrar, srv NotificationAPIServer) {
	s.RegisterService(&NotificationAPI_ServiceDesc, srv)
}

func _NotificationAPI_NotifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationAPIServer).NotifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationAPI_NotifyEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationAPIServer).NotifyEmail(ctx, req.(*EmailNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationAPI_NotifySms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationAPIServer).NotifySms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationAPI_NotifySms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationAPIServer).NotifySms(ctx, req.(*SmsNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationAPI_ServiceDesc is the grpc.ServiceDesc for NotificationAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notification.v1.NotificationAPI",
	HandlerType: (*NotificationAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyEmail",
			Handler:    _NotificationAPI_NotifyEmail_Handler,
		},
		{
			MethodName: "NotifySms",
			Handler:    _NotificationAPI_NotifySms_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notification/v1/notification_api.proto",
}
